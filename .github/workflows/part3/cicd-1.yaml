name : cicd-1 # 이 워크플로우의 이름을 설정한다. 

# dev 브랜치에서 my-app 디렉토리 안의 파일이 변경되는 경우에 대한 PR에 대해서만 깃허브 액션즈 워크플로우가 트리거 된다.  

on : # 이 키는 해당 워크플로우가 어떤 이벤트에 의해 트리거될지 정의한다.
  pull_request: # 이벤트의 특정 타입에 대해 워크플로우를 트리거한다. 
    types: [opened, synchronize , closed] # 새로운 PR이 생성될 때 트리거 , 새로운 커밋 혹은 기존 커밋이 수정될 때 , PR이 닫힐 때 워크플로우가 트리거 된다. 
    branches: [dev] # 이 워크플로우가 트리거 될 브랜치를 제한한다. 여기서는 dev 브랜치에 대한 PR에서만 워크플로우가 실행된다. 
    paths: # 워크플로우가 트리거 될 파일 또는 디렉토리의 경로를 지정한다. 
    - 'my-app/**' # my-app 디렉토리 내의 모든 변경 사항 ( 하위 디렉토리 포함 )에 대해 워크플로우를 트리거 한다. 

# 잡 구성 

jobs : # test라는 하나의 작업을 정의한다. 
  test: 
    # if 구문을 통해 풀리퀘스트가 생성되거나, PR에 변경사항이 동기화될때만 이 작업을 수행한다. 
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest # 이 작업이 실행될 환경을 지정한다. 
    steps: # 작업을 구성하는 단계들을 나열한다. 각 단계는 작업이 실행될 때 순차적으로 처리된다. 
    - name: checkout # 현재 단계의 이름을 'checkout'으로 지정한다. -> github 액션 로그에 표시된다. 
      uses: actions/checkout@v4 # uses 키워드를 특정 깃허브 액션을 사용하도록 지정한다. 
      # actions/checkout@v4는 깃허브에서 제공하는 공식 'checkout' 액션의 버전 4를 사용하라는 의미로, 
      # actions/checkout 액션은 워크플로우가 실행되는 가상 환경에 레포지토리의 코드를 체크 아웃하게 해주며, 이로써 후속 단계에서 코드에 대한 작업을 수행할 수 있게 된다. 


  
  # merged 되면 실행되는 job 
  image-build: 
   if : github.event.pull_request.merged == true 
   runs-on : ubuntu-latest
   steps:
    - name : checkout
      uses : actions/checkout@v4 

#  이미지 빌드 잡이 성공한 다음, 수행되는 작업 즉, CD 단계 
  deploy:
    runs-on : ubuntu-latest
    needs: [image-build]
    steps: 
    - name: checkout
      uses: actions/checkout@v4
